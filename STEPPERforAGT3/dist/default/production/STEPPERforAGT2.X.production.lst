

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sun Sep 24 00:15:55 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 1.43
    25                           ; Generated 25/07/2017 GMT
    26                           ; 
    27                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F1827 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  0008                     	;# 
    67  0009                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  008C                     	;# 
    88  008D                     	;# 
    89  0091                     	;# 
    90  0092                     	;# 
    91  0093                     	;# 
    92  0094                     	;# 
    93  0095                     	;# 
    94  0096                     	;# 
    95  0097                     	;# 
    96  0098                     	;# 
    97  0099                     	;# 
    98  009A                     	;# 
    99  009B                     	;# 
   100  009B                     	;# 
   101  009C                     	;# 
   102  009D                     	;# 
   103  009E                     	;# 
   104  010C                     	;# 
   105  010D                     	;# 
   106  0111                     	;# 
   107  0112                     	;# 
   108  0113                     	;# 
   109  0114                     	;# 
   110  0115                     	;# 
   111  0116                     	;# 
   112  0117                     	;# 
   113  0118                     	;# 
   114  0119                     	;# 
   115  011A                     	;# 
   116  011B                     	;# 
   117  011D                     	;# 
   118  011E                     	;# 
   119  018C                     	;# 
   120  018D                     	;# 
   121  0191                     	;# 
   122  0191                     	;# 
   123  0192                     	;# 
   124  0193                     	;# 
   125  0193                     	;# 
   126  0193                     	;# 
   127  0194                     	;# 
   128  0195                     	;# 
   129  0196                     	;# 
   130  0199                     	;# 
   131  019A                     	;# 
   132  019B                     	;# 
   133  019B                     	;# 
   134  019B                     	;# 
   135  019B                     	;# 
   136  019C                     	;# 
   137  019C                     	;# 
   138  019D                     	;# 
   139  019E                     	;# 
   140  019F                     	;# 
   141  020C                     	;# 
   142  020D                     	;# 
   143  0211                     	;# 
   144  0211                     	;# 
   145  0212                     	;# 
   146  0212                     	;# 
   147  0213                     	;# 
   148  0213                     	;# 
   149  0214                     	;# 
   150  0214                     	;# 
   151  0215                     	;# 
   152  0215                     	;# 
   153  0215                     	;# 
   154  0216                     	;# 
   155  0216                     	;# 
   156  0217                     	;# 
   157  0217                     	;# 
   158  0219                     	;# 
   159  021A                     	;# 
   160  021B                     	;# 
   161  021C                     	;# 
   162  021D                     	;# 
   163  021E                     	;# 
   164  021F                     	;# 
   165  0291                     	;# 
   166  0291                     	;# 
   167  0292                     	;# 
   168  0293                     	;# 
   169  0294                     	;# 
   170  0295                     	;# 
   171  0295                     	;# 
   172  0296                     	;# 
   173  0298                     	;# 
   174  0298                     	;# 
   175  0299                     	;# 
   176  029A                     	;# 
   177  029B                     	;# 
   178  029C                     	;# 
   179  029C                     	;# 
   180  029D                     	;# 
   181  029E                     	;# 
   182  029E                     	;# 
   183  0311                     	;# 
   184  0311                     	;# 
   185  0312                     	;# 
   186  0313                     	;# 
   187  0318                     	;# 
   188  0318                     	;# 
   189  0319                     	;# 
   190  031A                     	;# 
   191  0394                     	;# 
   192  0395                     	;# 
   193  0396                     	;# 
   194  039A                     	;# 
   195  039C                     	;# 
   196  039D                     	;# 
   197  039E                     	;# 
   198  039F                     	;# 
   199  0415                     	;# 
   200  0416                     	;# 
   201  0417                     	;# 
   202  041C                     	;# 
   203  041D                     	;# 
   204  041E                     	;# 
   205  0FE4                     	;# 
   206  0FE5                     	;# 
   207  0FE6                     	;# 
   208  0FE7                     	;# 
   209  0FE8                     	;# 
   210  0FE9                     	;# 
   211  0FEA                     	;# 
   212  0FEB                     	;# 
   213  0FED                     	;# 
   214  0FEE                     	;# 
   215  0FEF                     	;# 
   216  0000                     	;# 
   217  0001                     	;# 
   218  0002                     	;# 
   219  0003                     	;# 
   220  0004                     	;# 
   221  0005                     	;# 
   222  0006                     	;# 
   223  0007                     	;# 
   224  0008                     	;# 
   225  0009                     	;# 
   226  000A                     	;# 
   227  000B                     	;# 
   228  000C                     	;# 
   229  000D                     	;# 
   230  0011                     	;# 
   231  0012                     	;# 
   232  0013                     	;# 
   233  0014                     	;# 
   234  0015                     	;# 
   235  0016                     	;# 
   236  0016                     	;# 
   237  0017                     	;# 
   238  0018                     	;# 
   239  0019                     	;# 
   240  001A                     	;# 
   241  001B                     	;# 
   242  001C                     	;# 
   243  001E                     	;# 
   244  001F                     	;# 
   245  008C                     	;# 
   246  008D                     	;# 
   247  0091                     	;# 
   248  0092                     	;# 
   249  0093                     	;# 
   250  0094                     	;# 
   251  0095                     	;# 
   252  0096                     	;# 
   253  0097                     	;# 
   254  0098                     	;# 
   255  0099                     	;# 
   256  009A                     	;# 
   257  009B                     	;# 
   258  009B                     	;# 
   259  009C                     	;# 
   260  009D                     	;# 
   261  009E                     	;# 
   262  010C                     	;# 
   263  010D                     	;# 
   264  0111                     	;# 
   265  0112                     	;# 
   266  0113                     	;# 
   267  0114                     	;# 
   268  0115                     	;# 
   269  0116                     	;# 
   270  0117                     	;# 
   271  0118                     	;# 
   272  0119                     	;# 
   273  011A                     	;# 
   274  011B                     	;# 
   275  011D                     	;# 
   276  011E                     	;# 
   277  018C                     	;# 
   278  018D                     	;# 
   279  0191                     	;# 
   280  0191                     	;# 
   281  0192                     	;# 
   282  0193                     	;# 
   283  0193                     	;# 
   284  0193                     	;# 
   285  0194                     	;# 
   286  0195                     	;# 
   287  0196                     	;# 
   288  0199                     	;# 
   289  019A                     	;# 
   290  019B                     	;# 
   291  019B                     	;# 
   292  019B                     	;# 
   293  019B                     	;# 
   294  019C                     	;# 
   295  019C                     	;# 
   296  019D                     	;# 
   297  019E                     	;# 
   298  019F                     	;# 
   299  020C                     	;# 
   300  020D                     	;# 
   301  0211                     	;# 
   302  0211                     	;# 
   303  0212                     	;# 
   304  0212                     	;# 
   305  0213                     	;# 
   306  0213                     	;# 
   307  0214                     	;# 
   308  0214                     	;# 
   309  0215                     	;# 
   310  0215                     	;# 
   311  0215                     	;# 
   312  0216                     	;# 
   313  0216                     	;# 
   314  0217                     	;# 
   315  0217                     	;# 
   316  0219                     	;# 
   317  021A                     	;# 
   318  021B                     	;# 
   319  021C                     	;# 
   320  021D                     	;# 
   321  021E                     	;# 
   322  021F                     	;# 
   323  0291                     	;# 
   324  0291                     	;# 
   325  0292                     	;# 
   326  0293                     	;# 
   327  0294                     	;# 
   328  0295                     	;# 
   329  0295                     	;# 
   330  0296                     	;# 
   331  0298                     	;# 
   332  0298                     	;# 
   333  0299                     	;# 
   334  029A                     	;# 
   335  029B                     	;# 
   336  029C                     	;# 
   337  029C                     	;# 
   338  029D                     	;# 
   339  029E                     	;# 
   340  029E                     	;# 
   341  0311                     	;# 
   342  0311                     	;# 
   343  0312                     	;# 
   344  0313                     	;# 
   345  0318                     	;# 
   346  0318                     	;# 
   347  0319                     	;# 
   348  031A                     	;# 
   349  0394                     	;# 
   350  0395                     	;# 
   351  0396                     	;# 
   352  039A                     	;# 
   353  039C                     	;# 
   354  039D                     	;# 
   355  039E                     	;# 
   356  039F                     	;# 
   357  0415                     	;# 
   358  0416                     	;# 
   359  0417                     	;# 
   360  041C                     	;# 
   361  041D                     	;# 
   362  041E                     	;# 
   363  0FE4                     	;# 
   364  0FE5                     	;# 
   365  0FE6                     	;# 
   366  0FE7                     	;# 
   367  0FE8                     	;# 
   368  0FE9                     	;# 
   369  0FEA                     	;# 
   370  0FEB                     	;# 
   371  0FED                     	;# 
   372  0FEE                     	;# 
   373  0FEF                     	;# 
   374                           
   375                           	psect	idataBANK0
   376  0124                     __pidataBANK0:	
   377                           
   378                           ;initializer for _sin_table
   379  0124  3400               	retlw	0
   380  0125  3400               	retlw	0
   381  0126  3403               	retlw	3
   382  0127  3400               	retlw	0
   383  0128  3405               	retlw	5
   384  0129  3400               	retlw	0
   385  012A  3408               	retlw	8
   386  012B  3400               	retlw	0
   387  012C  340A               	retlw	10
   388  012D  3400               	retlw	0
   389  012E  340D               	retlw	13
   390  012F  3400               	retlw	0
   391  0130  340F               	retlw	15
   392  0131  3400               	retlw	0
   393  0132  3412               	retlw	18
   394  0133  3400               	retlw	0
   395  0134  3414               	retlw	20
   396  0135  3400               	retlw	0
   397  0136  3417               	retlw	23
   398  0137  3400               	retlw	0
   399  0138  3419               	retlw	25
   400  0139  3400               	retlw	0
   401  013A  341B               	retlw	27
   402  013B  3400               	retlw	0
   403  013C  341E               	retlw	30
   404  013D  3400               	retlw	0
   405  013E  3420               	retlw	32
   406  013F  3400               	retlw	0
   407  0140  3423               	retlw	35
   408  0141  3400               	retlw	0
   409  0142  3425               	retlw	37
   410  0143  3400               	retlw	0
   411  0144  3428               	retlw	40
   412  0145  3400               	retlw	0
   413  0146  342C               	retlw	44
   414  0147  3400               	retlw	0
   415  0148  3431               	retlw	49
   416  0149  3400               	retlw	0
   417  014A  3436               	retlw	54
   418  014B  3400               	retlw	0
   419  014C  343A               	retlw	58
   420  014D  3400               	retlw	0
   421  014E  343F               	retlw	63
   422  014F  3400               	retlw	0
   423  0150  3443               	retlw	67
   424  0151  3400               	retlw	0
   425  0152  3447               	retlw	71
   426  0153  3400               	retlw	0
   427  0154  344B               	retlw	75
   428  0155  3400               	retlw	0
   429  0156  345B               	retlw	91
   430  0157  3400               	retlw	0
   431  0158  3461               	retlw	97
   432  0159  3400               	retlw	0
   433  015A  3468               	retlw	104
   434  015B  3400               	retlw	0
   435  015C  3468               	retlw	104
   436  015D  3400               	retlw	0
   437  015E  3472               	retlw	114
   438  015F  3400               	retlw	0
   439  0160  3480               	retlw	128
   440  0161  3400               	retlw	0
   441  0162  3480               	retlw	128
   442  0163  3400               	retlw	0
   443                           
   444                           ;initializer for _quadrant
   445  0164  3401               	retlw	1
   446  0165  3400               	retlw	0
   447  001C                     _T2CONbits	set	28
   448  001B                     _PR2	set	27
   449  0011                     _PIR1bits	set	17
   450  000B                     _INTCONbits	set	11
   451  000D                     _PORTB	set	13
   452  000C                     _PORTA	set	12
   453  009C                     _ADRESH	set	156
   454  0091                     _PIE1bits	set	145
   455  009E                     _ADCON1bits	set	158
   456  009D                     _ADCON0bits	set	157
   457  0095                     _OPTION_REGbits	set	149
   458  008D                     _TRISB	set	141
   459  008C                     _TRISA	set	140
   460  0099                     _OSCCONbits	set	153
   461  0117                     _FVRCONbits	set	279
   462  018D                     _ANSELB	set	397
   463  018C                     _ANSELA	set	396
   464  0298                     _CCPR2L	set	664
   465  0291                     _CCPR1L	set	657
   466  029A                     _CCP2CONbits	set	666
   467  0293                     _CCP1CONbits	set	659
   468  0318                     _CCPR4L	set	792
   469  0311                     _CCPR3L	set	785
   470  031A                     _CCP4CONbits	set	794
   471  0313                     _CCP3CONbits	set	787
   472                           
   473                           ; #config settings
   474  0000                     
   475                           	psect	cinit
   476  0059                     start_initialization:	
   477  0059                     __initialization:	
   478                           
   479                           ; Initialize objects allocated to BANK0
   480  0059  3024               	movlw	low __pidataBANK0
   481  005A  0084               	movwf	4
   482  005B  3081               	movlw	(high __pidataBANK0)| (0+128)
   483  005C  0085               	movwf	5
   484  005D  3020               	movlw	low __pdataBANK0
   485  005E  0086               	movwf	6
   486  005F  3000               	movlw	high __pdataBANK0
   487  0060  0087               	movwf	7
   488  0061  3042               	movlw	66
   489  0062  3181  21E6         	fcall	init_ram
   490                           
   491                           ; Clear objects allocated to COMMON
   492  0064  01F6               	clrf	__pbssCOMMON& (0+127)
   493  0065  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   494  0066  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   495  0067  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   496                           
   497                           ; Clear objects allocated to BANK0
   498  0068  01EB               	clrf	__pbssBANK0& (0+127)
   499  0069  01EC               	clrf	(__pbssBANK0+1)& (0+127)
   500  006A                     end_of_initialization:	
   501                           ;End of C runtime variable initialization code
   502                           
   503  006A                     __end_of__initialization:	
   504  006A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   505  006B  0020               	movlb	0
   506  006C  3181  29C6         	ljmp	_main	;jump to C main() function
   507                           
   508                           	psect	bssCOMMON
   509  0076                     __pbssCOMMON:	
   510  0076                     intr@TMR2_counter:	
   511  0076                     	ds	2
   512  0078                     _adc_velocity:	
   513  0078                     	ds	2
   514                           
   515                           	psect	bssBANK0
   516  006B                     __pbssBANK0:	
   517  006B                     _bit_angle:	
   518  006B                     	ds	2
   519                           
   520                           	psect	dataBANK0
   521  0020                     __pdataBANK0:	
   522  0020                     _sin_table:	
   523  0020                     	ds	64
   524  0060                     _quadrant:	
   525  0060                     	ds	2
   526                           
   527                           	psect	inittext
   528  01E6                     init_ram:	
   529  01E6  00FE               	movwf	126
   530  01E7                     initloop:	
   531  01E7  0012               	moviw fsr0++
   532  01E8  001E               	movwi fsr1++
   533  01E9  0BFE               	decfsz	126,f
   534  01EA  29E7               	goto	initloop
   535  01EB  3400               	retlw	0
   536                           
   537                           	psect	cstackCOMMON
   538  0070                     __pcstackCOMMON:	
   539  0070                     ?_FVR_init:	
   540  0070                     ?_output:	
   541                           ; 1 bytes @ 0x0
   542                           
   543  0070                     ?_init:	
   544                           ; 1 bytes @ 0x0
   545                           
   546  0070                     ?_ADC_init:	
   547                           ; 1 bytes @ 0x0
   548                           
   549  0070                     ?_TMR2_init:	
   550                           ; 1 bytes @ 0x0
   551                           
   552  0070                     ?_PWM_init:	
   553                           ; 1 bytes @ 0x0
   554                           
   555  0070                     ?_main:	
   556                           ; 1 bytes @ 0x0
   557                           
   558  0070                     ?_intr:	
   559                           ; 1 bytes @ 0x0
   560                           
   561  0070                     ??_intr:	
   562                           ; 1 bytes @ 0x0
   563                           
   564                           
   565                           ; 1 bytes @ 0x0
   566  0070                     	ds	4
   567  0074                     ??_FVR_init:	
   568  0074                     ??_init:	
   569                           ; 1 bytes @ 0x4
   570                           
   571  0074                     ??_ADC_init:	
   572                           ; 1 bytes @ 0x4
   573                           
   574  0074                     ??_TMR2_init:	
   575                           ; 1 bytes @ 0x4
   576                           
   577  0074                     ??_PWM_init:	
   578                           ; 1 bytes @ 0x4
   579                           
   580  0074                     ?_sin_culc:	
   581                           ; 1 bytes @ 0x4
   582                           
   583  0074                     sin_culc@sin_angle_val:	
   584                           ; 2 bytes @ 0x4
   585                           
   586                           
   587                           ; 2 bytes @ 0x4
   588  0074                     	ds	2
   589  0076                     ??_output:	
   590  0076                     ??_main:	
   591                           ; 1 bytes @ 0x6
   592                           
   593                           
   594                           	psect	cstackBANK0
   595  0062                     __pcstackBANK0:	
   596                           ; 1 bytes @ 0x6
   597                           
   598  0062                     ??_sin_culc:	
   599                           
   600                           ; 1 bytes @ 0x0
   601  0062                     	ds	1
   602  0063                     ?_cos_culc:	
   603  0063                     cos_culc@cos_angle_val:	
   604                           ; 2 bytes @ 0x1
   605                           
   606                           
   607                           ; 2 bytes @ 0x1
   608  0063                     	ds	2
   609  0065                     ??_cos_culc:	
   610                           
   611                           ; 1 bytes @ 0x3
   612  0065                     	ds	2
   613  0067                     output@sin_out:	
   614                           
   615                           ; 2 bytes @ 0x5
   616  0067                     	ds	2
   617  0069                     output@cos_out:	
   618                           
   619                           ; 2 bytes @ 0x7
   620  0069                     	ds	2
   621                           
   622                           	psect	maintext
   623  01C6                     __pmaintext:	
   624 ;;
   625 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   626 ;;
   627 ;; *************** function _main *****************
   628 ;; Defined at:
   629 ;;		line 29 in file "agt2.c"
   630 ;; Parameters:    Size  Location     Type
   631 ;;		None
   632 ;; Auto vars:     Size  Location     Type
   633 ;;		None
   634 ;; Return value:  Size  Location     Type
   635 ;;                  1    wreg      void 
   636 ;; Registers used:
   637 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   638 ;; Tracked objects:
   639 ;;		On entry : B1F/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   643 ;;      Params:         0       0       0       0       0       0
   644 ;;      Locals:         0       0       0       0       0       0
   645 ;;      Temps:          0       0       0       0       0       0
   646 ;;      Totals:         0       0       0       0       0       0
   647 ;;Total ram usage:        0 bytes
   648 ;; Hardware stack levels required when called:    4
   649 ;; This function calls:
   650 ;;		_ADC_init
   651 ;;		_PWM_init
   652 ;;		_init
   653 ;;		_output
   654 ;; This function is called by:
   655 ;;		Startup code after reset
   656 ;; This function uses a non-reentrant model
   657 ;;
   658                           
   659                           
   660                           ;psect for function _main
   661  01C6                     _main:	
   662                           
   663                           ;agt2.c: 31: init();
   664                           
   665                           ;incstack = 0
   666                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   667  01C6  3181  2166  3181   	fcall	_init
   668                           
   669                           ;agt2.c: 32: ADC_init();
   670  01C9  3181  2181  3181   	fcall	_ADC_init
   671                           
   672                           ;agt2.c: 33: PWM_init();
   673  01CC  3181  21B1  3181   	fcall	_PWM_init
   674                           
   675                           ;agt2.c: 35: PIE1bits.TMR2IE = 1;
   676  01CF  0021               	movlb	1	; select bank1
   677  01D0  1491               	bsf	17,1	;volatile
   678  01D1                     l974:	
   679                           ;agt2.c: 38: while(1){
   680                           
   681                           
   682                           ;agt2.c: 39: output();
   683  01D1  3180  206E  3181   	fcall	_output
   684  01D4  29D1               	goto	l974
   685  01D5                     __end_of_main:	
   686                           ;agt2.c: 40: }
   687                           ;agt2.c: 42: return;
   688                           
   689                           
   690                           	psect	text1
   691  006E                     __ptext1:	
   692 ;; *************** function _output *****************
   693 ;; Defined at:
   694 ;;		line 45 in file "agt2.c"
   695 ;; Parameters:    Size  Location     Type
   696 ;;		None
   697 ;; Auto vars:     Size  Location     Type
   698 ;;  cos_out         2    7[BANK0 ] int 
   699 ;;  sin_out         2    5[BANK0 ] int 
   700 ;; Return value:  Size  Location     Type
   701 ;;                  1    wreg      void 
   702 ;; Registers used:
   703 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   704 ;; Tracked objects:
   705 ;;		On entry : 0/0
   706 ;;		On exit  : 0/0
   707 ;;		Unchanged: 0/0
   708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   709 ;;      Params:         0       0       0       0       0       0
   710 ;;      Locals:         0       4       0       0       0       0
   711 ;;      Temps:          0       0       0       0       0       0
   712 ;;      Totals:         0       4       0       0       0       0
   713 ;;Total ram usage:        4 bytes
   714 ;; Hardware stack levels used:    1
   715 ;; Hardware stack levels required when called:    3
   716 ;; This function calls:
   717 ;;		_cos_culc
   718 ;;		_sin_culc
   719 ;; This function is called by:
   720 ;;		_main
   721 ;; This function uses a non-reentrant model
   722 ;;
   723                           
   724                           
   725                           ;psect for function _output
   726  006E                     _output:	
   727                           
   728                           ;agt2.c: 47: int sin_out,cos_out;
   729                           ;agt2.c: 49: sin_out = sin_culc(bit_angle);
   730                           
   731                           ;incstack = 0
   732                           ; Regs used in _output: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   733  006E  0020               	movlb	0	; select bank0
   734  006F  086C               	movf	_bit_angle+1,w
   735  0070  00F5               	movwf	sin_culc@sin_angle_val+1
   736  0071  086B               	movf	_bit_angle,w
   737  0072  00F4               	movwf	sin_culc@sin_angle_val
   738  0073  3180  20CC  3180   	fcall	_sin_culc
   739  0076  0875               	movf	?_sin_culc+1,w
   740  0077  0020               	movlb	0	; select bank0
   741  0078  00E8               	movwf	output@sin_out+1
   742  0079  0874               	movf	?_sin_culc,w
   743  007A  00E7               	movwf	output@sin_out
   744                           
   745                           ;agt2.c: 50: cos_out = cos_culc(bit_angle);
   746  007B  086C               	movf	_bit_angle+1,w
   747  007C  00E4               	movwf	cos_culc@cos_angle_val+1
   748  007D  086B               	movf	_bit_angle,w
   749  007E  00E3               	movwf	cos_culc@cos_angle_val
   750  007F  3181  219B  3180   	fcall	_cos_culc
   751  0082  0020               	movlb	0	; select bank0
   752  0083  0864               	movf	?_cos_culc+1,w
   753  0084  00EA               	movwf	output@cos_out+1
   754  0085  0863               	movf	?_cos_culc,w
   755  0086  00E9               	movwf	output@cos_out
   756                           
   757                           ;agt2.c: 52: switch(quadrant){
   758  0087  28B7               	goto	l964
   759  0088                     l938:	
   760                           ;agt2.c: 54: case 1:
   761                           
   762                           
   763                           ;agt2.c: 55: CCPR1L = cos_out;
   764  0088  0869               	movf	output@cos_out,w
   765  0089  0025               	movlb	5	; select bank5
   766  008A  0091               	movwf	17	;volatile
   767                           
   768                           ;agt2.c: 56: CCPR2L = sin_out;
   769  008B  0020               	movlb	0	; select bank0
   770  008C  0867               	movf	output@sin_out,w
   771  008D  0025               	movlb	5	; select bank5
   772  008E  0098               	movwf	24	;volatile
   773                           
   774                           ;agt2.c: 57: CCPR3L = 0;
   775  008F  0026               	movlb	6	; select bank6
   776  0090  0191               	clrf	17	;volatile
   777                           
   778                           ;agt2.c: 58: CCPR4L = 0;
   779  0091  0198               	clrf	24	;volatile
   780                           
   781                           ;agt2.c: 59: break;
   782  0092  0008               	return
   783  0093                     l944:	
   784                           ;agt2.c: 60: case 2:
   785                           
   786                           
   787                           ;agt2.c: 61: CCPR1L = 0;
   788  0093  0025               	movlb	5	; select bank5
   789  0094  0191               	clrf	17	;volatile
   790                           
   791                           ;agt2.c: 62: CCPR2L = cos_out;
   792  0095  0020               	movlb	0	; select bank0
   793  0096  0869               	movf	output@cos_out,w
   794  0097  0025               	movlb	5	; select bank5
   795  0098  0098               	movwf	24	;volatile
   796                           
   797                           ;agt2.c: 63: CCPR3L = sin_out;
   798  0099  0020               	movlb	0	; select bank0
   799  009A  0867               	movf	output@sin_out,w
   800  009B  0026               	movlb	6	; select bank6
   801  009C  0091               	movwf	17	;volatile
   802                           
   803                           ;agt2.c: 64: CCPR4L = 0;
   804  009D  0198               	clrf	24	;volatile
   805                           
   806                           ;agt2.c: 65: break;
   807  009E  0008               	return
   808  009F                     l950:	
   809                           ;agt2.c: 66: case 3:
   810                           
   811                           
   812                           ;agt2.c: 67: CCPR1L = 0;
   813  009F  0025               	movlb	5	; select bank5
   814  00A0  0191               	clrf	17	;volatile
   815                           
   816                           ;agt2.c: 68: CCPR2L = 0;
   817  00A1  0198               	clrf	24	;volatile
   818                           
   819                           ;agt2.c: 69: CCPR3L = cos_out;
   820  00A2  0020               	movlb	0	; select bank0
   821  00A3  0869               	movf	output@cos_out,w
   822  00A4  0026               	movlb	6	; select bank6
   823  00A5  0091               	movwf	17	;volatile
   824                           
   825                           ;agt2.c: 70: CCPR4L = sin_out;
   826  00A6  0020               	movlb	0	; select bank0
   827  00A7  0867               	movf	output@sin_out,w
   828  00A8  0026               	movlb	6	; select bank6
   829  00A9  0098               	movwf	24	;volatile
   830                           
   831                           ;agt2.c: 71: break;
   832  00AA  0008               	return
   833  00AB                     l956:	
   834                           ;agt2.c: 72: case 4:
   835                           
   836                           
   837                           ;agt2.c: 73: CCPR1L = sin_out;
   838  00AB  0020               	movlb	0	; select bank0
   839  00AC  0867               	movf	output@sin_out,w
   840  00AD  0025               	movlb	5	; select bank5
   841  00AE  0091               	movwf	17	;volatile
   842                           
   843                           ;agt2.c: 74: CCPR2L = 0;
   844  00AF  0198               	clrf	24	;volatile
   845                           
   846                           ;agt2.c: 75: CCPR3L = 0;
   847  00B0  0026               	movlb	6	; select bank6
   848  00B1  0191               	clrf	17	;volatile
   849                           
   850                           ;agt2.c: 76: CCPR4L = cos_out;
   851  00B2  0020               	movlb	0	; select bank0
   852  00B3  0869               	movf	output@cos_out,w
   853  00B4  0026               	movlb	6	; select bank6
   854  00B5  0098               	movwf	24	;volatile
   855                           
   856                           ;agt2.c: 78: }
   857                           
   858                           ;agt2.c: 77: break;
   859  00B6  0008               	return
   860  00B7                     l964:	
   861                           
   862                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   863                           ; Switch size 1, requested type "space"
   864                           ; Number of cases is 1, Range of values is 0 to 0
   865                           ; switch strategies available:
   866                           ; Name         Instructions Cycles
   867                           ; simple_byte            4     3 (average)
   868                           ; direct_byte            8     6 (fixed)
   869                           ; jumptable            260     6 (fixed)
   870                           ;	Chosen strategy is simple_byte
   871  00B7  0020               	movlb	0	; select bank0
   872  00B8  0861               	movf	_quadrant+1,w
   873  00B9  3A00               	xorlw	0	; case 0
   874  00BA  1903               	skipnz
   875  00BB  28BD               	goto	l996
   876  00BC  28CB               	goto	l116
   877  00BD                     l996:	
   878                           
   879                           ; Switch size 1, requested type "space"
   880                           ; Number of cases is 4, Range of values is 1 to 4
   881                           ; switch strategies available:
   882                           ; Name         Instructions Cycles
   883                           ; simple_byte           13     7 (average)
   884                           ; direct_byte           17     9 (fixed)
   885                           ; jumptable            263     9 (fixed)
   886                           ;	Chosen strategy is simple_byte
   887  00BD  0860               	movf	_quadrant,w
   888  00BE  3A01               	xorlw	1	; case 1
   889  00BF  1903               	skipnz
   890  00C0  2888               	goto	l938
   891  00C1  3A03               	xorlw	3	; case 2
   892  00C2  1903               	skipnz
   893  00C3  2893               	goto	l944
   894  00C4  3A01               	xorlw	1	; case 3
   895  00C5  1903               	skipnz
   896  00C6  289F               	goto	l950
   897  00C7  3A07               	xorlw	7	; case 4
   898  00C8  1903               	skipnz
   899  00C9  28AB               	goto	l956
   900  00CA  28CB               	goto	l116
   901  00CB                     l116:	
   902  00CB  0008               	return
   903  00CC                     __end_of_output:	
   904                           
   905                           	psect	text2
   906  019B                     __ptext2:	
   907 ;; *************** function _cos_culc *****************
   908 ;; Defined at:
   909 ;;		line 81 in file "agt2.c"
   910 ;; Parameters:    Size  Location     Type
   911 ;;  cos_angle_va    2    1[BANK0 ] int 
   912 ;; Auto vars:     Size  Location     Type
   913 ;;		None
   914 ;; Return value:  Size  Location     Type
   915 ;;                  2    1[BANK0 ] int 
   916 ;; Registers used:
   917 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   918 ;; Tracked objects:
   919 ;;		On entry : 0/0
   920 ;;		On exit  : 0/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   923 ;;      Params:         0       2       0       0       0       0
   924 ;;      Locals:         0       0       0       0       0       0
   925 ;;      Temps:          0       2       0       0       0       0
   926 ;;      Totals:         0       4       0       0       0       0
   927 ;;Total ram usage:        4 bytes
   928 ;; Hardware stack levels used:    1
   929 ;; Hardware stack levels required when called:    2
   930 ;; This function calls:
   931 ;;		_sin_culc
   932 ;; This function is called by:
   933 ;;		_output
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937                           
   938                           ;psect for function _cos_culc
   939  019B                     _cos_culc:	
   940                           
   941                           ;agt2.c: 82: return sin_culc(80 - cos_angle_val);
   942                           
   943                           ;incstack = 0
   944                           ; Regs used in _cos_culc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   945  019B  0020               	movlb	0	; select bank0
   946  019C  0963               	comf	cos_culc@cos_angle_val,w
   947  019D  00E5               	movwf	??_cos_culc
   948  019E  0964               	comf	cos_culc@cos_angle_val+1,w
   949  019F  00E6               	movwf	??_cos_culc+1
   950  01A0  0AE5               	incf	??_cos_culc,f
   951  01A1  1903               	skipnz
   952  01A2  0AE6               	incf	??_cos_culc+1,f
   953  01A3  0865               	movf	??_cos_culc,w
   954  01A4  3E50               	addlw	80
   955  01A5  00F4               	movwf	sin_culc@sin_angle_val
   956  01A6  3000               	movlw	0
   957  01A7  3D66               	addwfc	??_cos_culc+1,w
   958  01A8  00F5               	movwf	sin_culc@sin_angle_val+1
   959  01A9  3180  20CC         	fcall	_sin_culc
   960  01AB  0875               	movf	?_sin_culc+1,w
   961  01AC  0020               	movlb	0	; select bank0
   962  01AD  00E4               	movwf	?_cos_culc+1
   963  01AE  0874               	movf	?_sin_culc,w
   964  01AF  00E3               	movwf	?_cos_culc
   965  01B0  0008               	return
   966  01B1                     __end_of_cos_culc:	
   967                           
   968                           	psect	text3
   969  00CC                     __ptext3:	
   970 ;; *************** function _sin_culc *****************
   971 ;; Defined at:
   972 ;;		line 85 in file "agt2.c"
   973 ;; Parameters:    Size  Location     Type
   974 ;;  sin_angle_va    2    4[COMMON] int 
   975 ;; Auto vars:     Size  Location     Type
   976 ;;		None
   977 ;; Return value:  Size  Location     Type
   978 ;;                  2    4[COMMON] int 
   979 ;; Registers used:
   980 ;;		wreg, fsr1l, fsr1h, status,2, status,0
   981 ;; Tracked objects:
   982 ;;		On entry : 0/0
   983 ;;		On exit  : 0/0
   984 ;;		Unchanged: 0/0
   985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   986 ;;      Params:         2       0       0       0       0       0
   987 ;;      Locals:         0       0       0       0       0       0
   988 ;;      Temps:          0       1       0       0       0       0
   989 ;;      Totals:         2       1       0       0       0       0
   990 ;;Total ram usage:        3 bytes
   991 ;; Hardware stack levels used:    1
   992 ;; Hardware stack levels required when called:    1
   993 ;; This function calls:
   994 ;;		Nothing
   995 ;; This function is called by:
   996 ;;		_output
   997 ;;		_cos_culc
   998 ;; This function uses a non-reentrant model
   999 ;;
  1000                           
  1001                           
  1002                           ;psect for function _sin_culc
  1003  00CC                     _sin_culc:	
  1004                           
  1005                           ;agt2.c: 87: if(bit_angle < 16){
  1006                           
  1007                           ;incstack = 0
  1008                           ; Regs used in _sin_culc: [wreg+fsr1l+fsr1h+status,2+status,0]
  1009  00CC  0020               	movlb	0	; select bank0
  1010  00CD  086C               	movf	_bit_angle+1,w
  1011  00CE  3A80               	xorlw	128
  1012  00CF  00E2               	movwf	??_sin_culc
  1013  00D0  3080               	movlw	128
  1014  00D1  0262               	subwf	??_sin_culc,w
  1015  00D2  1D03               	skipz
  1016  00D3  28D6               	goto	u225
  1017  00D4  3010               	movlw	16
  1018  00D5  026B               	subwf	_bit_angle,w
  1019  00D6                     u225:	
  1020  00D6  1C03               	btfss	3,0
  1021  00D7  291B               	goto	l928
  1022                           
  1023                           ;agt2.c: 90: else if(bit_angle < 32){
  1024                           
  1025                           ;agt2.c: 89: }
  1026  00D8  0020               	movlb	0	; select bank0
  1027  00D9  086C               	movf	_bit_angle+1,w
  1028  00DA  3A80               	xorlw	128
  1029  00DB  00E2               	movwf	??_sin_culc
  1030  00DC  3080               	movlw	128
  1031  00DD  0262               	subwf	??_sin_culc,w
  1032  00DE  1D03               	skipz
  1033  00DF  28E2               	goto	u235
  1034  00E0  3020               	movlw	32
  1035  00E1  026B               	subwf	_bit_angle,w
  1036  00E2                     u235:	
  1037  00E2  1803               	skipnc
  1038  00E3  28E7               	goto	l914
  1039                           
  1040                           ;agt2.c: 91: sin_angle_val = (sin_angle_val - 16) >> 1 +16;
  1041  00E4  0874               	movf	sin_culc@sin_angle_val,w
  1042  00E5  3EF0               	addlw	240
  1043  00E6  2913               	goto	L3
  1044  00E7                     l914:	
  1045                           ;agt2.c: 92: }
  1046                           
  1047                           
  1048                           ;agt2.c: 93: else if(bit_angle < 48){
  1049  00E7  0020               	movlb	0	; select bank0
  1050  00E8  086C               	movf	_bit_angle+1,w
  1051  00E9  3A80               	xorlw	128
  1052  00EA  00E2               	movwf	??_sin_culc
  1053  00EB  3080               	movlw	128
  1054  00EC  0262               	subwf	??_sin_culc,w
  1055  00ED  1D03               	skipz
  1056  00EE  28F1               	goto	u245
  1057  00EF  3030               	movlw	48
  1058  00F0  026B               	subwf	_bit_angle,w
  1059  00F1                     u245:	
  1060  00F1  1803               	skipnc
  1061  00F2  28F6               	goto	l918
  1062                           
  1063                           ;agt2.c: 94: sin_angle_val = (sin_angle_val - 32) >> 2 +16+8;
  1064  00F3  0874               	movf	sin_culc@sin_angle_val,w
  1065  00F4  3EE0               	addlw	224
  1066  00F5  2913               	goto	L3
  1067  00F6                     l918:	
  1068                           ;agt2.c: 95: }
  1069                           
  1070                           
  1071                           ;agt2.c: 96: else if(bit_angle < 64){
  1072  00F6  0020               	movlb	0	; select bank0
  1073  00F7  086C               	movf	_bit_angle+1,w
  1074  00F8  3A80               	xorlw	128
  1075  00F9  00E2               	movwf	??_sin_culc
  1076  00FA  3080               	movlw	128
  1077  00FB  0262               	subwf	??_sin_culc,w
  1078  00FC  1D03               	skipz
  1079  00FD  2900               	goto	u255
  1080  00FE  3040               	movlw	64
  1081  00FF  026B               	subwf	_bit_angle,w
  1082  0100                     u255:	
  1083  0100  1803               	skipnc
  1084  0101  2905               	goto	l922
  1085                           
  1086                           ;agt2.c: 97: sin_angle_val = (sin_angle_val - 48) >> 3 +16+8+4;
  1087  0102  0874               	movf	sin_culc@sin_angle_val,w
  1088  0103  3ED0               	addlw	208
  1089  0104  2913               	goto	L3
  1090  0105                     l922:	
  1091                           ;agt2.c: 98: }
  1092                           
  1093                           
  1094                           ;agt2.c: 99: else if(bit_angle < 80){
  1095  0105  0020               	movlb	0	; select bank0
  1096  0106  086C               	movf	_bit_angle+1,w
  1097  0107  3A80               	xorlw	128
  1098  0108  00E2               	movwf	??_sin_culc
  1099  0109  3080               	movlw	128
  1100  010A  0262               	subwf	??_sin_culc,w
  1101  010B  1D03               	skipz
  1102  010C  290F               	goto	u265
  1103  010D  3050               	movlw	80
  1104  010E  026B               	subwf	_bit_angle,w
  1105  010F                     u265:	
  1106  010F  1803               	skipnc
  1107  0110  2917               	goto	l926
  1108                           
  1109                           ;agt2.c: 100: sin_angle_val = (sin_angle_val - 64) >> 4 +16+8+4+2;
  1110  0111  0874               	movf	sin_culc@sin_angle_val,w
  1111  0112  3EC0               	addlw	192
  1112  0113                     L3:	
  1113  0113  00F4               	movwf	sin_culc@sin_angle_val
  1114  0114  30FF               	movlw	255
  1115  0115  3D75               	addwfc	sin_culc@sin_angle_val+1,w
  1116  0116  291A               	goto	L4
  1117  0117                     l926:	
  1118                           ;agt2.c: 101: }
  1119                           
  1120                           
  1121                           ;agt2.c: 102: else{
  1122                           ;agt2.c: 103: sin_angle_val = 31;
  1123  0117  301F               	movlw	31
  1124  0118  00F4               	movwf	sin_culc@sin_angle_val
  1125  0119  3000               	movlw	0
  1126  011A                     L4:	
  1127  011A  00F5               	movwf	sin_culc@sin_angle_val+1
  1128  011B                     l928:	
  1129                           
  1130                           ;agt2.c: 104: }
  1131                           ;agt2.c: 106: return sin_table[sin_angle_val];
  1132  011B  3574               	lslf	sin_culc@sin_angle_val,w
  1133  011C  3E20               	addlw	(low (_sin_table| 0))& (0+255)
  1134  011D  0086               	movwf	6
  1135  011E  0187               	clrf	7
  1136  011F  3F40               	moviw [0]fsr1
  1137  0120  00F4               	movwf	?_sin_culc
  1138  0121  3F41               	moviw [1]fsr1
  1139  0122  00F5               	movwf	?_sin_culc+1
  1140  0123  0008               	return
  1141  0124                     __end_of_sin_culc:	
  1142                           
  1143                           	psect	text4
  1144  0166                     __ptext4:	
  1145 ;; *************** function _init *****************
  1146 ;; Defined at:
  1147 ;;		line 8 in file "init_1827.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;		None
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;		None
  1152 ;; Return value:  Size  Location     Type
  1153 ;;                  1    wreg      void 
  1154 ;; Registers used:
  1155 ;;		wreg, status,2, status,0
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1161 ;;      Params:         0       0       0       0       0       0
  1162 ;;      Locals:         0       0       0       0       0       0
  1163 ;;      Temps:          0       0       0       0       0       0
  1164 ;;      Totals:         0       0       0       0       0       0
  1165 ;;Total ram usage:        0 bytes
  1166 ;; Hardware stack levels used:    1
  1167 ;; Hardware stack levels required when called:    1
  1168 ;; This function calls:
  1169 ;;		Nothing
  1170 ;; This function is called by:
  1171 ;;		_main
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           
  1176                           ;psect for function _init
  1177  0166                     _init:	
  1178                           
  1179                           ;init_1827.c: 10: OSCCONbits.SCS = 0b00;
  1180                           
  1181                           ;incstack = 0
  1182                           ; Regs used in _init: [wreg+status,2+status,0]
  1183  0166  30FC               	movlw	-4
  1184  0167  0021               	movlb	1	; select bank1
  1185  0168  0599               	andwf	25,f	;volatile
  1186                           
  1187                           ;init_1827.c: 11: OSCCONbits.IRCF = 0b1110;
  1188  0169  0819               	movf	25,w	;volatile
  1189  016A  3987               	andlw	-121
  1190  016B  3870               	iorlw	112
  1191  016C  0099               	movwf	25	;volatile
  1192                           
  1193                           ;init_1827.c: 12: OSCCONbits.SPLLEN = 1;
  1194  016D  1799               	bsf	25,7	;volatile
  1195                           
  1196                           ;init_1827.c: 16: TRISA = 0b00000100;
  1197  016E  3004               	movlw	4
  1198  016F  008C               	movwf	12	;volatile
  1199                           
  1200                           ;init_1827.c: 17: TRISB = 0b00000000;
  1201  0170  018D               	clrf	13	;volatile
  1202                           
  1203                           ;init_1827.c: 19: ANSELA = 0b00000100;
  1204  0171  3004               	movlw	4
  1205  0172  0023               	movlb	3	; select bank3
  1206  0173  008C               	movwf	12	;volatile
  1207                           
  1208                           ;init_1827.c: 20: ANSELB = 0b00000000;
  1209  0174  018D               	clrf	13	;volatile
  1210                           
  1211                           ;init_1827.c: 22: PORTA = 0b00000000;
  1212  0175  0020               	movlb	0	; select bank0
  1213  0176  018C               	clrf	12	;volatile
  1214                           
  1215                           ;init_1827.c: 23: PORTB = 0b00000000;
  1216  0177  018D               	clrf	13	;volatile
  1217                           
  1218                           ;init_1827.c: 25: OPTION_REGbits.nWPUEN = 0;
  1219  0178  0021               	movlb	1	; select bank1
  1220  0179  1395               	bcf	21,7	;volatile
  1221                           
  1222                           ;init_1827.c: 26: OPTION_REGbits.INTEDG = 0;
  1223  017A  1315               	bcf	21,6	;volatile
  1224                           
  1225                           ;init_1827.c: 27: OPTION_REGbits.TMR0CS = 0;
  1226  017B  1295               	bcf	21,5	;volatile
  1227                           
  1228                           ;init_1827.c: 28: OPTION_REGbits.PSA = 0;
  1229  017C  1195               	bcf	21,3	;volatile
  1230                           
  1231                           ;init_1827.c: 29: OPTION_REGbits.PS = 0b000;
  1232  017D  30F8               	movlw	-8
  1233  017E  0595               	andwf	21,f	;volatile
  1234                           
  1235                           ;init_1827.c: 36: INTCONbits.GIE = 1;
  1236  017F  178B               	bsf	11,7	;volatile
  1237  0180  0008               	return
  1238  0181                     __end_of_init:	
  1239                           
  1240                           	psect	text5
  1241  01B1                     __ptext5:	
  1242 ;; *************** function _PWM_init *****************
  1243 ;; Defined at:
  1244 ;;		line 83 in file "init_1827.c"
  1245 ;; Parameters:    Size  Location     Type
  1246 ;;		None
  1247 ;; Auto vars:     Size  Location     Type
  1248 ;;		None
  1249 ;; Return value:  Size  Location     Type
  1250 ;;                  1    wreg      void 
  1251 ;; Registers used:
  1252 ;;		wreg, status,2, status,0, pclath, cstack
  1253 ;; Tracked objects:
  1254 ;;		On entry : 0/0
  1255 ;;		On exit  : 0/0
  1256 ;;		Unchanged: 0/0
  1257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1258 ;;      Params:         0       0       0       0       0       0
  1259 ;;      Locals:         0       0       0       0       0       0
  1260 ;;      Temps:          0       0       0       0       0       0
  1261 ;;      Totals:         0       0       0       0       0       0
  1262 ;;Total ram usage:        0 bytes
  1263 ;; Hardware stack levels used:    1
  1264 ;; Hardware stack levels required when called:    2
  1265 ;; This function calls:
  1266 ;;		_TMR2_init
  1267 ;; This function is called by:
  1268 ;;		_main
  1269 ;; This function uses a non-reentrant model
  1270 ;;
  1271                           
  1272                           
  1273                           ;psect for function _PWM_init
  1274  01B1                     _PWM_init:	
  1275                           
  1276                           ;init_1827.c: 85: CCP1CONbits.CCP1M = 0b1100;
  1277                           
  1278                           ;incstack = 0
  1279                           ; Regs used in _PWM_init: [wreg+status,2+status,0+pclath+cstack]
  1280  01B1  0025               	movlb	5	; select bank5
  1281  01B2  0813               	movf	19,w	;volatile
  1282  01B3  39F0               	andlw	-16
  1283  01B4  380C               	iorlw	12
  1284  01B5  0093               	movwf	19	;volatile
  1285                           
  1286                           ;init_1827.c: 86: CCP2CONbits.CCP2M = 0b1100;
  1287  01B6  081A               	movf	26,w	;volatile
  1288  01B7  39F0               	andlw	-16
  1289  01B8  380C               	iorlw	12
  1290  01B9  009A               	movwf	26	;volatile
  1291                           
  1292                           ;init_1827.c: 87: CCP3CONbits.CCP3M = 0b1100;
  1293  01BA  0026               	movlb	6	; select bank6
  1294  01BB  0813               	movf	19,w	;volatile
  1295  01BC  39F0               	andlw	-16
  1296  01BD  380C               	iorlw	12
  1297  01BE  0093               	movwf	19	;volatile
  1298                           
  1299                           ;init_1827.c: 88: CCP4CONbits.CCP4M = 0b1100;
  1300  01BF  081A               	movf	26,w	;volatile
  1301  01C0  39F0               	andlw	-16
  1302  01C1  380C               	iorlw	12
  1303  01C2  009A               	movwf	26	;volatile
  1304                           
  1305                           ;init_1827.c: 91: TMR2_init();
  1306  01C3  3181  21D5         	fcall	_TMR2_init
  1307  01C5  0008               	return
  1308  01C6                     __end_of_PWM_init:	
  1309                           
  1310                           	psect	text6
  1311  01D5                     __ptext6:	
  1312 ;; *************** function _TMR2_init *****************
  1313 ;; Defined at:
  1314 ;;		line 59 in file "init_1827.c"
  1315 ;; Parameters:    Size  Location     Type
  1316 ;;		None
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;		None
  1319 ;; Return value:  Size  Location     Type
  1320 ;;                  1    wreg      void 
  1321 ;; Registers used:
  1322 ;;		wreg, status,2, status,0
  1323 ;; Tracked objects:
  1324 ;;		On entry : 0/0
  1325 ;;		On exit  : 0/0
  1326 ;;		Unchanged: 0/0
  1327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1328 ;;      Params:         0       0       0       0       0       0
  1329 ;;      Locals:         0       0       0       0       0       0
  1330 ;;      Temps:          0       0       0       0       0       0
  1331 ;;      Totals:         0       0       0       0       0       0
  1332 ;;Total ram usage:        0 bytes
  1333 ;; Hardware stack levels used:    1
  1334 ;; Hardware stack levels required when called:    1
  1335 ;; This function calls:
  1336 ;;		Nothing
  1337 ;; This function is called by:
  1338 ;;		_PWM_init
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           
  1343                           ;psect for function _TMR2_init
  1344  01D5                     _TMR2_init:	
  1345                           
  1346                           ;init_1827.c: 62: PR2 = 255;
  1347                           
  1348                           ;incstack = 0
  1349                           ; Regs used in _TMR2_init: [wreg+status,2+status,0]
  1350  01D5  30FF               	movlw	255
  1351  01D6  0020               	movlb	0	; select bank0
  1352  01D7  009B               	movwf	27	;volatile
  1353                           
  1354                           ;init_1827.c: 64: T2CONbits.TMR2ON = 1;
  1355  01D8  151C               	bsf	28,2	;volatile
  1356                           
  1357                           ;init_1827.c: 65: T2CONbits.T2CKPS = 0b0;
  1358  01D9  30FC               	movlw	-4
  1359  01DA  059C               	andwf	28,f	;volatile
  1360                           
  1361                           ;init_1827.c: 66: T2CONbits.T2OUTPS = 0b0000;
  1362  01DB  3087               	movlw	-121
  1363  01DC  059C               	andwf	28,f	;volatile
  1364                           
  1365                           ;init_1827.c: 71: INTCONbits.PEIE = 1;
  1366  01DD  170B               	bsf	11,6	;volatile
  1367  01DE  0008               	return
  1368  01DF                     __end_of_TMR2_init:	
  1369                           
  1370                           	psect	text7
  1371  0181                     __ptext7:	
  1372 ;; *************** function _ADC_init *****************
  1373 ;; Defined at:
  1374 ;;		line 38 in file "init_1827.c"
  1375 ;; Parameters:    Size  Location     Type
  1376 ;;		None
  1377 ;; Auto vars:     Size  Location     Type
  1378 ;;		None
  1379 ;; Return value:  Size  Location     Type
  1380 ;;                  1    wreg      void 
  1381 ;; Registers used:
  1382 ;;		wreg, status,2, status,0, pclath, cstack
  1383 ;; Tracked objects:
  1384 ;;		On entry : 0/0
  1385 ;;		On exit  : 0/0
  1386 ;;		Unchanged: 0/0
  1387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1388 ;;      Params:         0       0       0       0       0       0
  1389 ;;      Locals:         0       0       0       0       0       0
  1390 ;;      Temps:          0       0       0       0       0       0
  1391 ;;      Totals:         0       0       0       0       0       0
  1392 ;;Total ram usage:        0 bytes
  1393 ;; Hardware stack levels used:    1
  1394 ;; Hardware stack levels required when called:    2
  1395 ;; This function calls:
  1396 ;;		_FVR_init
  1397 ;; This function is called by:
  1398 ;;		_main
  1399 ;; This function uses a non-reentrant model
  1400 ;;
  1401                           
  1402                           
  1403                           ;psect for function _ADC_init
  1404  0181                     _ADC_init:	
  1405                           
  1406                           ;init_1827.c: 40: ADCON0bits.CHS = 2;
  1407                           
  1408                           ;incstack = 0
  1409                           ; Regs used in _ADC_init: [wreg+status,2+status,0+pclath+cstack]
  1410  0181  0021               	movlb	1	; select bank1
  1411  0182  081D               	movf	29,w	;volatile
  1412  0183  3983               	andlw	-125
  1413  0184  3808               	iorlw	8
  1414  0185  009D               	movwf	29	;volatile
  1415                           
  1416                           ;init_1827.c: 42: ADCON1bits.ADNREF = 0;
  1417  0186  111E               	bcf	30,2	;volatile
  1418                           
  1419                           ;init_1827.c: 43: ADCON1bits.ADPREF = 0b11;
  1420  0187  3003               	movlw	3
  1421  0188  049E               	iorwf	30,f	;volatile
  1422                           
  1423                           ;init_1827.c: 44: FVR_init();
  1424  0189  3181  21DF         	fcall	_FVR_init
  1425                           
  1426                           ;init_1827.c: 46: ADCON1bits.ADCS = 0b010;
  1427  018B  0021               	movlb	1	; select bank1
  1428  018C  081E               	movf	30,w	;volatile
  1429  018D  398F               	andlw	-113
  1430  018E  3820               	iorlw	32
  1431  018F  009E               	movwf	30	;volatile
  1432                           
  1433                           ;init_1827.c: 47: ADCON1bits.ADCS = 0b011;
  1434  0190  081E               	movf	30,w	;volatile
  1435  0191  398F               	andlw	-113
  1436  0192  3830               	iorlw	48
  1437  0193  009E               	movwf	30	;volatile
  1438                           
  1439                           ;init_1827.c: 49: PIR1bits.ADIF = 0;
  1440  0194  0020               	movlb	0	; select bank0
  1441  0195  1311               	bcf	17,6	;volatile
  1442                           
  1443                           ;init_1827.c: 50: PIE1bits.ADIE = 0;
  1444  0196  0021               	movlb	1	; select bank1
  1445  0197  1311               	bcf	17,6	;volatile
  1446                           
  1447                           ;init_1827.c: 52: ADCON1bits.ADFM = 0;
  1448  0198  139E               	bcf	30,7	;volatile
  1449                           
  1450                           ;init_1827.c: 56: ADCON0bits.ADON = 1;
  1451  0199  141D               	bsf	29,0	;volatile
  1452  019A  0008               	return
  1453  019B                     __end_of_ADC_init:	
  1454                           
  1455                           	psect	text8
  1456  01DF                     __ptext8:	
  1457 ;; *************** function _FVR_init *****************
  1458 ;; Defined at:
  1459 ;;		line 75 in file "init_1827.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;		None
  1462 ;; Auto vars:     Size  Location     Type
  1463 ;;		None
  1464 ;; Return value:  Size  Location     Type
  1465 ;;                  1    wreg      void 
  1466 ;; Registers used:
  1467 ;;		wreg, status,2, status,0
  1468 ;; Tracked objects:
  1469 ;;		On entry : 0/0
  1470 ;;		On exit  : 0/0
  1471 ;;		Unchanged: 0/0
  1472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1473 ;;      Params:         0       0       0       0       0       0
  1474 ;;      Locals:         0       0       0       0       0       0
  1475 ;;      Temps:          0       0       0       0       0       0
  1476 ;;      Totals:         0       0       0       0       0       0
  1477 ;;Total ram usage:        0 bytes
  1478 ;; Hardware stack levels used:    1
  1479 ;; Hardware stack levels required when called:    1
  1480 ;; This function calls:
  1481 ;;		Nothing
  1482 ;; This function is called by:
  1483 ;;		_ADC_init
  1484 ;; This function uses a non-reentrant model
  1485 ;;
  1486                           
  1487                           
  1488                           ;psect for function _FVR_init
  1489  01DF                     _FVR_init:	
  1490                           
  1491                           ;init_1827.c: 76: FVRCONbits.FVREN = 1;
  1492                           
  1493                           ;incstack = 0
  1494                           ; Regs used in _FVR_init: [wreg+status,2+status,0]
  1495  01DF  0022               	movlb	2	; select bank2
  1496  01E0  1797               	bsf	23,7	;volatile
  1497                           
  1498                           ;init_1827.c: 78: FVRCONbits.ADFVR = 0b11;
  1499  01E1  3003               	movlw	3
  1500  01E2  0497               	iorwf	23,f	;volatile
  1501  01E3                     l54:	
  1502                           ;init_1827.c: 80: while(FVRCONbits.FVRRDY == 0){
  1503                           
  1504  01E3  1B17               	btfsc	23,6	;volatile
  1505  01E4  0008               	return
  1506  01E5  29E3               	goto	l54
  1507  01E6                     __end_of_FVR_init:	
  1508                           
  1509                           	psect	intentry
  1510  0004                     __pintentry:	
  1511 ;; *************** function _intr *****************
  1512 ;; Defined at:
  1513 ;;		line 109 in file "agt2.c"
  1514 ;; Parameters:    Size  Location     Type
  1515 ;;		None
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;		None
  1518 ;; Return value:  Size  Location     Type
  1519 ;;                  1    wreg      void 
  1520 ;; Registers used:
  1521 ;;		wreg, status,2, status,0
  1522 ;; Tracked objects:
  1523 ;;		On entry : 0/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1527 ;;      Params:         0       0       0       0       0       0
  1528 ;;      Locals:         0       0       0       0       0       0
  1529 ;;      Temps:          4       0       0       0       0       0
  1530 ;;      Totals:         4       0       0       0       0       0
  1531 ;;Total ram usage:        4 bytes
  1532 ;; Hardware stack levels used:    1
  1533 ;; This function calls:
  1534 ;;		Nothing
  1535 ;; This function is called by:
  1536 ;;		Interrupt level 1
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540  0004                     _intr:	
  1541                           
  1542                           ;incstack = 0
  1543  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  1544                           
  1545                           ; Regs used in _intr: [wreg+status,2+status,0]
  1546  0005  3180               	pagesel	$
  1547  0006  0020               	movlb	0	; select bank0
  1548  0007  087F               	movf	127,w
  1549  0008  00F3               	movwf	??_intr+3
  1550                           
  1551                           ;agt2.c: 112: if(PIR1bits.TMR2IF == 1){
  1552  0009  1C91               	btfss	17,1	;volatile
  1553  000A  2847               	goto	i1l880
  1554                           
  1555                           ;agt2.c: 113: static int TMR2_counter = 0;
  1556                           ;agt2.c: 114: TMR2_counter ++;
  1557  000B  3001               	movlw	1
  1558  000C  07F6               	addwf	intr@TMR2_counter,f
  1559  000D  3000               	movlw	0
  1560  000E  3DF7               	addwfc	intr@TMR2_counter+1,f
  1561                           
  1562                           ;agt2.c: 115: if(TMR2_counter > 10 + adc_velocity){
  1563  000F  0878               	movf	_adc_velocity,w
  1564  0010  3E0A               	addlw	10
  1565  0011  00F0               	movwf	??_intr
  1566  0012  3000               	movlw	0
  1567  0013  3D79               	addwfc	_adc_velocity+1,w
  1568  0014  00F1               	movwf	??_intr+1
  1569  0015  0871               	movf	??_intr+1,w
  1570  0016  3A80               	xorlw	128
  1571  0017  00F2               	movwf	??_intr+2
  1572  0018  0877               	movf	intr@TMR2_counter+1,w
  1573  0019  3A80               	xorlw	128
  1574  001A  0272               	subwf	??_intr+2,w
  1575  001B  1D03               	skipz
  1576  001C  281F               	goto	u18_25
  1577  001D  0876               	movf	intr@TMR2_counter,w
  1578  001E  0270               	subwf	??_intr,w
  1579  001F                     u18_25:	
  1580  001F  1803               	skipnc
  1581  0020  2843               	goto	i1l876
  1582                           
  1583                           ;agt2.c: 116: bit_angle ++;
  1584  0021  3001               	movlw	1
  1585  0022  0020               	movlb	0	; select bank0
  1586  0023  07EB               	addwf	_bit_angle,f
  1587  0024  3000               	movlw	0
  1588  0025  3DEC               	addwfc	_bit_angle+1,f
  1589                           
  1590                           ;agt2.c: 117: TMR2_counter = 0;
  1591  0026  01F6               	clrf	intr@TMR2_counter
  1592  0027  01F7               	clrf	intr@TMR2_counter+1
  1593                           
  1594                           ;agt2.c: 118: if(bit_angle == 80){
  1595  0028  3050               	movlw	80
  1596  0029  066B               	xorwf	_bit_angle,w
  1597  002A  046C               	iorwf	_bit_angle+1,w
  1598  002B  1D03               	btfss	3,2
  1599  002C  2843               	goto	i1l876
  1600                           
  1601                           ;agt2.c: 119: quadrant ++;
  1602  002D  3001               	movlw	1
  1603  002E  07E0               	addwf	_quadrant,f
  1604  002F  3000               	movlw	0
  1605  0030  3DE1               	addwfc	_quadrant+1,f
  1606                           
  1607                           ;agt2.c: 120: bit_angle = 0;
  1608  0031  01EB               	clrf	_bit_angle
  1609  0032  01EC               	clrf	_bit_angle+1
  1610                           
  1611                           ;agt2.c: 121: if(quadrant > 5){
  1612  0033  0861               	movf	_quadrant+1,w
  1613  0034  3A80               	xorlw	128
  1614  0035  00F0               	movwf	??_intr
  1615  0036  3080               	movlw	128
  1616  0037  0270               	subwf	??_intr,w
  1617  0038  1D03               	skipz
  1618  0039  283C               	goto	u20_25
  1619  003A  3006               	movlw	6
  1620  003B  0260               	subwf	_quadrant,w
  1621  003C                     u20_25:	
  1622  003C  1C03               	skipc
  1623  003D  2843               	goto	i1l876
  1624                           
  1625                           ;agt2.c: 122: quadrant = 1;
  1626  003E  3001               	movlw	1
  1627  003F  0020               	movlb	0	; select bank0
  1628  0040  00E0               	movwf	_quadrant
  1629  0041  3000               	movlw	0
  1630  0042  00E1               	movwf	_quadrant+1
  1631  0043                     i1l876:	
  1632                           
  1633                           ;agt2.c: 123: }
  1634                           ;agt2.c: 124: }
  1635                           ;agt2.c: 125: }
  1636                           ;agt2.c: 127: ADCON0bits.GO_nDONE = 1;
  1637  0043  0021               	movlb	1	; select bank1
  1638  0044  149D               	bsf	29,1	;volatile
  1639                           
  1640                           ;agt2.c: 128: PIR1bits.TMR2IF = 0;
  1641  0045  0020               	movlb	0	; select bank0
  1642  0046  1091               	bcf	17,1	;volatile
  1643  0047                     i1l880:	
  1644                           
  1645                           ;agt2.c: 129: }
  1646                           ;agt2.c: 132: if(PIR1bits.ADIF == 1){
  1647  0047  1F11               	btfss	17,6	;volatile
  1648  0048  2853               	goto	i1l144
  1649                           
  1650                           ;agt2.c: 133: adc_velocity = ADRESH;
  1651  0049  0021               	movlb	1	; select bank1
  1652  004A  081C               	movf	28,w	;volatile
  1653  004B  00F0               	movwf	??_intr
  1654  004C  01F1               	clrf	??_intr+1
  1655  004D  0870               	movf	??_intr,w
  1656  004E  00F8               	movwf	_adc_velocity
  1657  004F  0871               	movf	??_intr+1,w
  1658  0050  00F9               	movwf	_adc_velocity+1
  1659                           
  1660                           ;agt2.c: 134: PIR1bits.ADIF = 0;
  1661  0051  0020               	movlb	0	; select bank0
  1662  0052  1311               	bcf	17,6	;volatile
  1663  0053                     i1l144:	
  1664  0053  0873               	movf	??_intr+3,w
  1665  0054  00FF               	movwf	127
  1666  0055  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1667  0056  0009               	retfie
  1668  0057                     __end_of_intr:	
  1669  007E                     btemp	set	126	;btemp
  1670  007E                     int$flags	set	126
  1671  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        66
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80      9      77
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _output->_sin_culc
    _cos_culc->_sin_culc

Critical Paths under _intr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_output
    _output->_cos_culc
    _cos_culc->_sin_culc

Critical Paths under _intr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _intr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _intr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _intr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _intr in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     950
                           _ADC_init
                           _PWM_init
                               _init
                             _output
 ---------------------------------------------------------------------------------
 (1) _output                                               4     4      0     950
                                              5 BANK0      4     4      0
                           _cos_culc
                           _sin_culc
 ---------------------------------------------------------------------------------
 (2) _cos_culc                                             4     2      2     396
                                              1 BANK0      4     2      2
                           _sin_culc
 ---------------------------------------------------------------------------------
 (2) _sin_culc                                             3     1      2     300
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_init                                             0     0      0       0
                          _TMR2_init
 ---------------------------------------------------------------------------------
 (2) _TMR2_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
                           _FVR_init
 ---------------------------------------------------------------------------------
 (2) _FVR_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _intr                                                 4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
     _FVR_init
   _PWM_init
     _TMR2_init
   _init
   _output
     _cos_culc
       _sin_culc
     _sin_culc

 _intr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      57       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      9      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      57      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sun Sep 24 00:15:55 2017

       intr@TMR2_counter 0076              __CFG_CP$OFF 0000                       l54 01E3  
            __CFG_LVP$ON 0000                      l116 00CB                      l922 0105  
                    l914 00E7                      l926 0117                      l918 00F6  
                    l950 009F                      l928 011B                      l944 0093  
                    l938 0088                      l956 00AB                      l964 00B7  
                    l974 01D1                      l996 00BD                      u225 00D6  
                    u235 00E2                      u245 00F1                      _PR2 001B  
                    u255 0100                      u265 010F             __CFG_CPD$OFF 0000  
           __CFG_BORV$LO 0000             __CFG_IESO$ON 0000             __CFG_WRT$OFF 0000  
          __CFG_FCMEN$ON 0000                     _main 01C6                     _init 0166  
                   _intr 0004                     fsr0h 0005                     fsr1h 0007  
                   fsr0l 0004                     fsr1l 0006                     btemp 007E  
          __CFG_BOREN$ON 0000                     start 0057         __end_of_ADC_init 019B  
          __CFG_MCLRE$ON 0000            __CFG_PLLEN$ON 0000                    ?_main 0070  
                  ?_init 0070                    ?_intr 0070            __CFG_WDTE$OFF 0000  
                  i1l144 0053                    i1l880 0047                    i1l876 0043  
                  u20_25 003C                    u18_25 001F                    _PORTA 000C  
                  _PORTB 000D                    _TRISA 008C                    _TRISB 008D  
       __end_of_FVR_init 01E6       __size_of_TMR2_init 000A         __end_of_PWM_init 01C6  
                  status 0003             _adc_velocity 0078                    wtemp0 007E  
        __initialization 0059             __end_of_main 01D5             __end_of_init 0181  
           __end_of_intr 0057                   ??_main 0076                   ??_init 0074  
                 ??_intr 0070                   _ADRESH 009C                   _CCPR1L 0291  
                 _CCPR2L 0298                   _CCPR3L 0311                   _CCPR4L 0318  
                 _ANSELA 018C                   _ANSELB 018D           __CFG_PWRTE$OFF 0000  
       __end_of_cos_culc 01B1           __CFG_STVREN$ON 0000        __end_of_TMR2_init 01DF  
                 _output 006E         __end_of_sin_culc 0124                ?_ADC_init 0070  
__end_of__initialization 006A           __pcstackCOMMON 0070                ?_FVR_init 0070  
           __pidataBANK0 0124                ?_PWM_init 0070           _OPTION_REGbits 0095  
             ??_ADC_init 0074               __pbssBANK0 006B               __pmaintext 01C6  
             ??_FVR_init 0074               __pintentry 0004                  ?_output 0070  
             ??_PWM_init 0074                ?_cos_culc 0063                ?_sin_culc 0074  
                __ptext1 006E                  __ptext2 019B                  __ptext3 00CC  
                __ptext4 0166                  __ptext5 01B1                  __ptext6 01D5  
                __ptext7 0181                  __ptext8 01DF          __size_of_output 005E  
              _T2CONbits 001C               ??_cos_culc 0065     end_of_initialization 006A  
                init_ram 01E6                  initloop 01E7               ??_sin_culc 0062  
              _TMR2_init 01D5         __CFG_FOSC$INTOSC 0000        __size_of_ADC_init 001A  
            _CCP1CONbits 0293              _CCP2CONbits 029A              _CCP3CONbits 0313  
            _CCP4CONbits 031A        __size_of_FVR_init 0007               ?_TMR2_init 0070  
         __end_of_output 00CC      start_initialization 0059        __size_of_PWM_init 0015  
            __pdataBANK0 0020            output@cos_out 0069                 ??_output 0076  
          output@sin_out 0067              __pbssCOMMON 0076                ___latbits 0001  
          __pcstackBANK0 0062        __size_of_cos_culc 0016                _bit_angle 006B  
      __size_of_sin_culc 0058              ??_TMR2_init 0074                 _ADC_init 0181  
               _PIE1bits 0091                 _PIR1bits 0011                _sin_table 0020  
               _FVR_init 01DF               _ADCON0bits 009D               _ADCON1bits 009E  
               _PWM_init 01B1                 _cos_culc 019B    cos_culc@cos_angle_val 0063  
          __size_of_main 000F            __size_of_init 001B            __size_of_intr 0053  
               _sin_culc 00CC                 _quadrant 0060                 int$flags 007E  
             _INTCONbits 000B               _FVRCONbits 0117                 intlevel1 0000  
      __CFG_CLKOUTEN$OFF 0000               _OSCCONbits 0099    sin_culc@sin_angle_val 0074  
